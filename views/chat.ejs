<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Business Internet Solutions Chat</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #0056b3;
            --secondary-color: #6c757d;
            --background-color: #f8f9fa;
            --chat-bg: #ffffff;
            --user-message-bg: #e3f2fd;
            --ai-message-bg: #f5f5f5;
            --border-color: #dee2e6;
        }

        body {
            background-color: var(--background-color);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .chat-container {
            max-width: 800px;
            margin: 2rem auto;
            background: var(--chat-bg);
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .chat-header {
            background: var(--primary-color);
            color: white;
            padding: 1rem;
            text-align: center;
        }

        .chat-messages {
            height: 500px;
            overflow-y: auto;
            padding: 1rem;
        }

        .message {
            margin-bottom: 1rem;
            padding: 0.75rem;
            border-radius: 10px;
            max-width: 80%;
        }

        .user-message {
            background: var(--user-message-bg);
            margin-left: auto;
            border-bottom-right-radius: 2px;
        }

        .ai-message {
            background: var(--ai-message-bg);
            margin-right: auto;
            border-bottom-left-radius: 2px;
        }

        .chat-input {
            padding: 1rem;
            border-top: 1px solid var(--border-color);
            background: white;
        }

        .chat-input form {
            display: flex;
            gap: 0.5rem;
        }

        .chat-input input {
            flex: 1;
            padding: 0.5rem;
            border: 1px solid var(--border-color);
            border-radius: 5px;
        }

        .chat-input button {
            padding: 0.5rem 1rem;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .chat-input button:hover {
            background-color: #004494;
        }

        .typing-indicator {
            display: none;
            padding: 0.5rem;
            color: var(--secondary-color);
        }

        .typing-indicator.active {
            display: block;
        }

        .package-card {
            border: 1px solid var(--border-color);
            border-radius: 5px;
            padding: 1rem;
            margin: 0.5rem 0;
            background: white;
        }

        .package-card h4 {
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }

        .package-features {
            list-style: none;
            padding-left: 0;
        }

        .package-features li {
            margin-bottom: 0.25rem;
        }

        .package-features li i {
            color: var(--primary-color);
            margin-right: 0.5rem;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <h2><i class="fas fa-wifi"></i> Business Internet Solutions</h2>
            <p>Chat with Sarah, your Business Internet Advisor</p>
        </div>
        
        <div class="chat-messages" id="chatMessages">
            <!-- Messages will be dynamically added here -->
        </div>
        
        <div class="typing-indicator" id="typingIndicator">
            Sarah is typing...
        </div>
        
        <div class="chat-input">
            <form id="chatForm" onsubmit="sendMessage(event)">
                <input type="text" id="messageInput" placeholder="Type your message..." required>
                <button type="submit">
                    <i class="fas fa-paper-plane"></i> Send
                </button>
            </form>
        </div>
    </div>

    <script>
        const userId = Date.now().toString(); // Generate unique user ID
        let conversationStarted = false;

        function addMessage(content, isUser) {
            const messagesDiv = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user-message' : 'ai-message'}`;
            messageDiv.textContent = content;
            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        function showTypingIndicator() {
            document.getElementById('typingIndicator').classList.add('active');
        }

        function hideTypingIndicator() {
            document.getElementById('typingIndicator').classList.remove('active');
        }

        async function sendMessage(event) {
            event.preventDefault();
            
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value.trim();
            
            if (!message) return;
            
            // Add user message to chat
            addMessage(message, true);
            messageInput.value = '';
            
            // Show typing indicator
            showTypingIndicator();
            
            try {
                const response = await fetch('/leads/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        message,
                        userId
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Hide typing indicator
                    hideTypingIndicator();
                    
                    // Add AI response to chat
                    addMessage(data.message, false);
                    
                    // If this is the first message, start the conversation
                    if (!conversationStarted) {
                        conversationStarted = true;
                    }
                    
                    // If lead is captured, show success message
                    if (data.leadCaptured) {
                        addMessage("Thank you for your interest! Brian will be calling you shortly to discuss our business internet solutions in detail.", false);
                    }
                } else {
                    throw new Error(data.error || 'Failed to process message');
                }
            } catch (error) {
                console.error('Error sending message:', error);
                hideTypingIndicator();
                addMessage("I apologize, but I'm having trouble processing your message. Please try again.", false);
            }
        }

        // Start conversation when page loads
        window.onload = function() {
            showTypingIndicator();
            fetch('/leads/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    message: 'Hello',
                    userId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    hideTypingIndicator();
                    addMessage(data.message, false);
                    conversationStarted = true;
                }
            })
            .catch(error => {
                console.error('Error starting conversation:', error);
                hideTypingIndicator();
                addMessage("I apologize, but I'm having trouble connecting. Please refresh the page to try again.", false);
            });
        };
    </script>
</body>
</html>
