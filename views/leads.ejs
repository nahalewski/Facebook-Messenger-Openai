<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CRM Dashboard</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #6200ee;
            --primary-light: #9b4dff;
            --primary-dark: #3700b3;
            --secondary-color: #03dac6;
            --background-color: #ffffff;
            --background-color-light: #f5f5f5;
            --text-color: #333333;
            --text-color-light: #666666;
            --border-color: #e0e0e0;
            --success-color: #4caf50;
            --warning-color: #ff9800;
            --danger-color: #f44336;
            --border-radius: 8px;
            --hover-color: #7c4dff;
        }

        body {
            margin: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            background-color: var(--background-color-light);
            color: var(--text-color);
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Header Styles */
        .header {
            background-color: var(--primary-color);
            color: white;
            padding: 16px 0;
            margin-bottom: 24px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .header h1 {
            margin: 0;
            font-size: 24px;
        }

        .header-actions {
            display: flex;
            gap: 12px;
        }

        /* Dashboard Grid */
        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .metric-card {
            background: var(--background-color);
            padding: 20px;
            border-radius: var(--border-radius);
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12);
            transition: transform 0.2s ease;
        }

        .metric-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .metric-title {
            color: var(--text-color-light);
            font-size: 14px;
            margin-bottom: 8px;
        }

        .metric-value {
            font-size: 24px;
            font-weight: 600;
            color: var(--primary-color);
        }

        /* Pipeline View */
        .pipeline {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }

        .pipeline-stage {
            background: var(--background-color-light);
            border-radius: var(--border-radius);
            padding: 16px;
        }

        .stage-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 16px;
            padding-bottom: 8px;
            border-bottom: 2px solid var(--primary-light);
        }

        .stage-name {
            font-weight: 600;
            color: var(--primary-color);
        }

        .stage-count {
            background: var(--primary-light);
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
        }

        .pipeline-card {
            background: var(--background-color);
            border-radius: var(--border-radius);
            padding: 16px;
            margin-bottom: 12px;
            cursor: pointer;
            transition: all 0.2s ease;
            border: 1px solid var(--border-color);
        }

        .pipeline-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border-color: var(--primary-light);
        }

        .pipeline-card h3 {
            margin: 0 0 8px 0;
            color: var(--primary-color);
        }

        .lead-meta {
            font-size: 14px;
            color: var(--text-color-light);
        }

        .lead-meta div {
            margin-bottom: 4px;
        }

        .lead-meta i {
            width: 16px;
            margin-right: 8px;
            color: var(--primary-color);
        }

        /* Activity Feed */
        .activity-feed {
            background: var(--background-color);
            border-radius: var(--border-radius);
            padding: 20px;
            margin-top: 30px;
        }

        .activity-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            color: var(--primary-color);
        }

        .activity-list {
            max-height: 400px;
            overflow-y: auto;
        }

        .activity-item {
            display: flex;
            align-items: flex-start;
            padding: 12px 0;
            border-bottom: 1px solid var(--border-color);
        }

        .activity-icon {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: var(--primary-light);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 12px;
        }

        .activity-content {
            flex: 1;
        }

        .activity-time {
            font-size: 12px;
            color: var(--text-color-light);
        }

        /* Tags */
        .tag {
            display: inline-block;
            padding: 4px 8px;
            background: var(--primary-light);
            color: white;
            border-radius: 12px;
            font-size: 12px;
            margin-right: 4px;
            margin-bottom: 4px;
        }

        /* Buttons */
        .button {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            border: none;
            border-radius: var(--border-radius);
            font-size: 0.9rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            background: var(--background-color);
            color: var(--text-color);
        }

        .primary-button {
            background: var(--primary-color);
            color: white;
        }

        .primary-button:hover {
            background: var(--hover-color);
            transform: translateY(-1px);
        }

        /* Forms */
        .form-control {
            width: 100%;
            padding: 8px;
            margin-bottom: 16px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            font-size: 14px;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        /* Previous modal and form styles remain */
    </style>
</head>
<body>
    <div class="header">
        <div class="header-content">
            <h1>CRM Dashboard</h1>
            <div class="header-actions">
                <button class="button primary-button" onclick="document.getElementById('uploadModal').style.display='block'">
                    <i class="fas fa-upload"></i> Import Leads
                </button>
                <button class="button primary-button" onclick="document.getElementById('addLeadModal').style.display='block'">
                    <i class="fas fa-plus"></i> Add Lead
                </button>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Dashboard Metrics -->
        <div class="dashboard">
            <div class="metric-card">
                <div class="metric-title">Total Leads</div>
                <div class="metric-value"><%= leads.length %></div>
            </div>
            <div class="metric-card">
                <div class="metric-title">Active Deals</div>
                <div class="metric-value"><%= leads.filter(l => !['Closed Won', 'Closed Lost'].includes(l.stage)).length %></div>
            </div>
            <div class="metric-card">
                <div class="metric-title">Won This Month</div>
                <div class="metric-value"><%= leads.filter(l => l.stage === 'Closed Won' && new Date(l.closeDate) > new Date(new Date().setDate(1))).length %></div>
            </div>
            <div class="metric-card">
                <div class="metric-title">Follow-ups Today</div>
                <div class="metric-value"><%= leads.filter(l => l.nextFollowUp && new Date(l.nextFollowUp).toDateString() === new Date().toDateString()).length %></div>
            </div>
        </div>

        <!-- Pipeline View -->
        <div class="pipeline">
            <% ['New', 'Qualified', 'Contacted', 'Negotiation', 'Closed Won', 'Closed Lost'].forEach(function(stage) { %>
                <div class="pipeline-stage">
                    <div class="stage-header">
                        <span class="stage-name"><%= stage %></span>
                        <span class="stage-count"><%= leads.filter(l => l.stage === stage).length %></span>
                    </div>
                    <% leads.filter(l => l.stage === stage).forEach(function(lead) { %>
                        <div class="pipeline-card" onclick="showLeadDetails('<%= JSON.stringify(lead).replace(/'/g, "\\'") %>')">
                            <h3><%= lead.name %></h3>
                            <div class="lead-meta">
                                <div><i class="fas fa-building"></i> <%= lead.company %></div>
                                <div><i class="fas fa-envelope"></i> <%= lead.email %></div>
                                <div><i class="fas fa-phone"></i> <%= lead.phone %></div>
                                <% if (lead.value) { %>
                                    <div><i class="fas fa-dollar-sign"></i> $<%= lead.value.toLocaleString() %></div>
                                <% } %>
                                <% if (lead.nextFollowUp) { %>
                                    <div><i class="fas fa-calendar"></i> Follow-up: <%= new Date(lead.nextFollowUp).toLocaleDateString() %></div>
                                <% } %>
                            </div>
                            <% if (lead.tags && lead.tags.length > 0) { %>
                                <div class="pipeline-card-tags">
                                    <% lead.tags.forEach(function(tag) { %>
                                        <span class="tag"><%= tag %></span>
                                    <% }); %>
                                </div>
                            <% } %>
                        </div>
                    <% }); %>
                </div>
            <% }); %>
        </div>

        <!-- Activity Feed -->
        <div class="activity-feed">
            <div class="activity-header">
                <h2>Recent Activity</h2>
            </div>
            <div class="activity-list">
                <% activities.slice(0, 10).forEach(function(activity) { %>
                    <div class="activity-item">
                        <div class="activity-icon">
                            <% if (activity.type === 'Note Added') { %>
                                <i class="fas fa-sticky-note"></i>
                            <% } else if (activity.type === 'Follow-up Scheduled') { %>
                                <i class="fas fa-calendar-plus"></i>
                            <% } else if (activity.type === 'Stage Updated') { %>
                                <i class="fas fa-exchange-alt"></i>
                            <% } else { %>
                                <i class="fas fa-info-circle"></i>
                            <% } %>
                        </div>
                        <div class="activity-content">
                            <div class="activity-text"><%= activity.description %></div>
                            <div class="activity-time"><%= new Date(activity.timestamp).toLocaleString() %></div>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>

        <!-- Add Lead Modal -->
        <div id="addLeadModal" class="modal">
            <div class="modal-content">
                <span class="close-modal" onclick="document.getElementById('addLeadModal').style.display='none'">&times;</span>
                <h2>Add New Lead</h2>
                <form id="addLeadForm" onsubmit="submitNewLead(event)">
                    <div class="form-group">
                        <label>Name *</label>
                        <input type="text" class="form-control" name="name" required>
                    </div>
                    <div class="form-group">
                        <label>Company</label>
                        <input type="text" class="form-control" name="company">
                    </div>
                    <div class="form-group">
                        <label>Email *</label>
                        <input type="email" class="form-control" name="email" required>
                    </div>
                    <div class="form-group">
                        <label>Phone</label>
                        <input type="tel" class="form-control" name="phone">
                    </div>
                    <div class="form-group">
                        <label>Deal Value</label>
                        <input type="number" class="form-control" name="value" min="0">
                    </div>
                    <div class="form-group">
                        <label>Source</label>
                        <select class="form-control" name="source">
                            <option value="Website">Website</option>
                            <option value="Referral">Referral</option>
                            <option value="Social Media">Social Media</option>
                            <option value="Email Campaign">Email Campaign</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Tags (comma-separated)</label>
                        <input type="text" class="form-control" name="tags" placeholder="e.g., priority, enterprise">
                    </div>
                    <div class="form-buttons">
                        <button type="button" class="button" onclick="document.getElementById('addLeadModal').style.display='none'">Cancel</button>
                        <button type="submit" class="button primary-button">Add Lead</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Previous modals remain -->
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        $(document).ready(function() {
            // Initialize DataTable
            $('#leadsTable').DataTable({
                order: [[1, 'desc']],
                pageLength: 25,
                responsive: true,
                columnDefs: [
                    { targets: [0, 3, 12], orderable: false }
                ]
            });

            // Initialize Charts
            const ctx = document.getElementById('leadsChart').getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: Object.keys(metrics.leadsByStage),
                    datasets: [{
                        label: 'Leads by Stage',
                        data: Object.values(metrics.leadsByStage),
                        backgroundColor: [
                            '#4CAF50',
                            '#2196F3',
                            '#FFC107',
                            '#FF9800',
                            '#4CAF50',
                            '#f44336'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        }
                    }
                }
            });

            // Tab switching
            $('.tab').click(function() {
                $('.tab').removeClass('active');
                $(this).addClass('active');
                $('.tab-content').removeClass('active');
                $(`#${$(this).data('tab')}-content`).addClass('active');
            });

            // Hide message after 5 seconds
            setTimeout(function() {
                $('.message').fadeOut('slow');
            }, 5000);
        });

        // Helper function to get activity icon
        function getActivityIcon(type) {
            const iconMap = {
                'CSV Import': 'file-import',
                'Lead Created': 'user-plus',
                'Lead Updated': 'user-edit',
                'Follow-up Scheduled': 'calendar-plus',
                'Note Added': 'sticky-note',
                'Email Sent': 'envelope',
                'Call Made': 'phone',
                'Meeting Scheduled': 'calendar-check',
                'Deal Won': 'trophy',
                'Deal Lost': 'times-circle'
            };
            return iconMap[type] || 'circle';
        }

        // Previous JavaScript functions remain the same

        function handleFileUpload(input) {
            if (input.files && input.files[0]) {
                const file = input.files[0];
                if (!file.name.toLowerCase().endsWith('.csv')) {
                    alert('Please upload a valid CSV file');
                    return;
                }

                const formData = new FormData(document.getElementById('csvUploadForm'));
                
                // Show loading state
                const uploadButton = input.parentElement.previousElementSibling;
                const originalContent = uploadButton.innerHTML;
                uploadButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Uploading...';
                uploadButton.disabled = true;

                fetch('/leads/upload', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        throw new Error(data.error);
                    }
                    if (data.success) {
                        // Show success message
                        const messageDiv = document.createElement('div');
                        messageDiv.className = 'message';
                        messageDiv.style.display = 'block';
                        messageDiv.innerHTML = `Successfully uploaded ${data.count} leads`;
                        document.querySelector('.container').insertBefore(messageDiv, document.querySelector('.dashboard'));
                        
                        // Refresh the page after 2 seconds
                        setTimeout(() => {
                            window.location.reload();
                        }, 2000);
                    }
                })
                .catch(error => {
                    console.error('Upload error:', error);
                    alert('Error uploading file: ' + error.message);
                })
                .finally(() => {
                    // Reset the input and button
                    input.value = '';
                    uploadButton.innerHTML = originalContent;
                    uploadButton.disabled = false;
                });
            }
        }

        let currentLeadId = null;

        function showLeadDetails(leadData) {
            const lead = JSON.parse(leadData);
            currentLeadId = lead.id;  // Store the current lead ID
            const modal = document.getElementById('leadModal');
            
            // Update modal content
            document.getElementById('modalLeadName').textContent = lead.name;
            document.getElementById('modalLeadEmail').textContent = lead.email || 'Not provided';
            document.getElementById('modalLeadPhone').textContent = lead.phone || 'Not provided';
            document.getElementById('modalLeadSecondaryPhone').textContent = lead.secondaryPhone || 'Not provided';
            document.getElementById('modalLeadSource').textContent = lead.source || 'Not provided';
            document.getElementById('modalLeadChannel').textContent = lead.channel || 'Not provided';
            document.getElementById('modalLeadStage').textContent = lead.stage;
            document.getElementById('modalLeadOwner').textContent = lead.owner;
            document.getElementById('modalLeadTime').textContent = new Date(lead.time).toLocaleString();
            
            // Update tags
            const tagsContainer = document.getElementById('modalLeadTags');
            tagsContainer.innerHTML = '';
            if (lead.tags && lead.tags.length > 0) {
                lead.tags.forEach(tag => {
                    const tagSpan = document.createElement('span');
                    tagSpan.className = 'tag';
                    tagSpan.textContent = tag;
                    tagsContainer.appendChild(tagSpan);
                });
            } else {
                tagsContainer.innerHTML = '<span>No tags</span>';
            }
            
            modal.style.display = 'block';
        }

        function closeLeadModal() {
            document.getElementById('leadModal').style.display = 'none';
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('leadModal');
            if (event.target == modal) {
                modal.style.display = 'none';
            }
        }

        function showAddNoteForm() {
            hideAllForms();
            document.getElementById('addNoteForm').style.display = 'block';
        }

        function showScheduleFollowUpForm() {
            hideAllForms();
            document.getElementById('scheduleFollowUpForm').style.display = 'block';
            // Set default datetime to tomorrow
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            tomorrow.setMinutes(tomorrow.getMinutes() - tomorrow.getTimezoneOffset());
            document.getElementById('followUpDateTime').value = tomorrow.toISOString().slice(0,16);
        }

        function showUpdateStageForm() {
            hideAllForms();
            document.getElementById('updateStageForm').style.display = 'block';
        }

        function hideAllForms() {
            const forms = document.getElementsByClassName('action-form');
            for (let form of forms) {
                form.style.display = 'none';
            }
        }

        function cancelForm(formId) {
            document.getElementById(formId).style.display = 'none';
        }

        function submitNote() {
            const noteContent = document.getElementById('noteContent').value;
            if (!noteContent.trim()) {
                alert('Please enter a note');
                return;
            }

            fetch('/leads/add-note', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    leadId: currentLeadId,
                    note: noteContent
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Note added successfully');
                    cancelForm('addNoteForm');
                    document.getElementById('noteContent').value = '';
                } else {
                    throw new Error(data.error || 'Failed to add note');
                }
            })
            .catch(error => {
                alert('Error adding note: ' + error.message);
            });
        }

        function submitFollowUp() {
            const dateTime = document.getElementById('followUpDateTime').value;
            const notes = document.getElementById('followUpNotes').value;
            
            if (!dateTime) {
                alert('Please select a date and time');
                return;
            }

            fetch('/leads/schedule-followup', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    leadId: currentLeadId,
                    dateTime: dateTime,
                    notes: notes
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Follow-up scheduled successfully');
                    cancelForm('scheduleFollowUpForm');
                    document.getElementById('followUpNotes').value = '';
                } else {
                    throw new Error(data.error || 'Failed to schedule follow-up');
                }
            })
            .catch(error => {
                alert('Error scheduling follow-up: ' + error.message);
            });
        }

        function submitStageUpdate() {
            const newStage = document.getElementById('newStage').value;
            const notes = document.getElementById('stageNotes').value;

            fetch('/leads/update-stage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    leadId: currentLeadId,
                    stage: newStage,
                    notes: notes
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Stage updated successfully');
                    cancelForm('updateStageForm');
                    document.getElementById('stageNotes').value = '';
                    // Refresh the page to show the updated stage
                    window.location.reload();
                } else {
                    throw new Error(data.error || 'Failed to update stage');
                }
            })
            .catch(error => {
                alert('Error updating stage: ' + error.message);
            });
        }

        function submitNewLead(event) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            const lead = {
                name: formData.get('name'),
                company: formData.get('company'),
                email: formData.get('email'),
                phone: formData.get('phone'),
                value: formData.get('value') ? Number(formData.get('value')) : 0,
                source: formData.get('source'),
                tags: formData.get('tags').split(',').map(tag => tag.trim()).filter(tag => tag),
                stage: 'New',
                created: new Date().toISOString()
            };

            fetch('/leads/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(lead)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.reload();
                } else {
                    throw new Error(data.error || 'Failed to add lead');
                }
            })
            .catch(error => {
                alert('Error adding lead: ' + error.message);
            });
        }
    </script>
</body>
</html>
